import { OpenAIEmbeddings } from "@langchain/openai";
import { HumanMessage } from "@langchain/core/messages";
import { NextResponse } from "next/server";
import { getSession, createSession, updateSession } from "@/models/session";
import { connectDB } from "@/lib/db";
import { z } from "zod";
import { getRetrieverFrom } from "@/lib/retriever";
import { callLLM } from "@/lib/llm";

const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

const questions: { [key: number]: string } = {
  1: "How practical do you think this lesson plan is? Are there any limitations?",
  2: "What do you predict the learning outcomes will be?",
  3: "Does the lesson plan align with its objectives? (Provide key points)",
  4: "Do you think the structure of this lesson makes sense?",
  5: "What are the weaknesses in this lesson plan?",
};



export async function POST(req: Request) {
  await connectDB();
  const {
    sessionId,
    lessonTopic,
    subject,
    level,
    ageRange,
    studentType,
    learningTime,
    timeSlot,
    limitation,
  } = await req.json();

  if (
    !sessionId ||
    !lessonTopic ||
    !subject ||
    !level ||
    !ageRange ||
    !studentType ||
    !learningTime ||
    !timeSlot ||
    !limitation
  ) {
    return NextResponse.json(
      { error: "Missing required fields." },
      { status: 400 }
    );
  }

  let session = await getSession(sessionId);

  try {
    // Step 1: Generate Lesson Plan
    if (!session) {
      console.log(`üÜï Creating new session: ${sessionId}`);

      const task = `‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÉ‡∏ô‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏ß‡∏° (Inclusive Classroom) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ ${level} ‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì ${ageRange} ‡∏õ‡∏µ
                    ‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏© ‡πÄ‡∏ä‡πà‡∏ô ${studentType}
                    ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏à‡∏∏‡∏î‡∏°‡∏∏‡πà‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏≠‡∏ô‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤ ${subject} ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á ${lessonTopic} ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${learningTime} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÇ‡∏î‡∏¢‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ ${timeSlot} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
                    ‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤: ${limitation}`;
      const type = `JSON`;
      const field = `{
        "courseTitle": "...",
        "level": "...",
        "subject": "...",
        "durationHours": "...",
        "unit": [
          {
            "unitTitle": "...",
            "duration": "...",
            "competencyFocus": ["...", "..."],
            "learningOutcomes": ["..."],
            "scenarios": "...",
            "udlDesign": {
              "multipleMeansOfEngagement": "...",
              "multipleMeansOfRepresentation": "...",
              "multipleMeansOfActionExpression": "..."
            },
            "activities": [
              {
                "activityTitle": "...",
                "strategies": ["..."],
                "scaffolding": true,
                "technologySupport": ["..."],
                "inclusionSupport": ["..."]
              }
            ],
            "assessment": {
              "formative": "...",
              "summative": "...",
              "diverseAssessmentMethods": ["..."],
              "transferAssessment": {
                "vertical": "...",
                "horizontal": "..."
              }
            }
          }
        ],
        "teacherDevelopment": ["..."],
        "collaboration": {
          "withParents": "...",
          "withExperts": "...",
          "withCoTeachers": "..."
        },
        "classroomEnvironment": {
          "physicalFlexibility": true,
          "emotionalSafety": true,
          "positiveBehaviorSupport": {
            "rules": "...",
            "reinforcements": "..."
          }
        }
      }`;

      const lessonPlan = await callLLM(task, type
        , field);
      console.log("lessonPlan", lessonPlan);

      await createSession({
        sessionId,
        step: 2,
        lessonPlan,
        responses: {},
        improvedLessonPlan: "",
      });

      try {
        return NextResponse.json({
          type: "json",
          lessonPlan: lessonPlan,
          nextQuestion: questions[1],
        });
      } catch (e) {
        console.error("Invalid JSON structure:", e);
        return NextResponse.json({
          error: "Model did not return valid JSON.",
          debug: lessonPlan,
        });
      }
    }

    // Step 2-5: Reflection Questions
    if (session.step >= 2 && session.step <= 5) {
      console.log(
        `üß† Step ${session.step}: Reflection for session ${sessionId}`
      );

      session.responses[`step${session.step}`] = userMessage;

      let context = "";
      for (let i = 2; i < session.step; i++) {
        if (session.responses[`step${i}`]) {
          context += `Question ${i}: ${questions[i]}\nUser Response: ${
            session.responses[`step${i}`]
          }\n\n`;
        }
      }

      const task = `‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô
        ‡∏Å‡∏≤‡∏£‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤:\n${context}
        ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: "${questions[session.step]}"
        ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: "${userMessage}"
        ‡∏à‡∏≤‡∏Å‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö AI ‡∏ó‡∏µ‡πà‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤.`;

      const aiResponse = await callLLM(task, "text", "‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö");

      await updateSession(sessionId, {
        [`responses.step${session.step}`]: userMessage,
        step: session.step + 1,
      });

      const conversation = [];
      for (let i = 1; i <= session.step; i++) {
        if (session.responses[`step${i}`]) {
          conversation.push({
            response: aiResponse,
            userMessage: session.responses[`step${i}`],
          });
        }
      }

      if (session.step <= 5) {
        return NextResponse.json({
          type: "text",
          nextQuestion: questions[session.step],
          conversation,
        });
      }
    }

    // Step 6: Improved Lesson Plan
    if (session.step > 5) {
      console.log(`üîÑ Improving lesson plan for session ${sessionId}`);

      const task = `‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏£‡∏π‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°:\n
        ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô: ${JSON.stringify(session.responses)}
        ‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°: ${session.lessonPlan}`;

      const type = "JSON";
      const field = "‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô, ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå, ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°, ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô.";
      const improvedLessonPlan = await callLLM(task, type, field);

      await updateSession(sessionId, {
        improvedLessonPlan,
        step: "completed",
      });

      return NextResponse.json({
        type: "json",
        improvedLessonPlan: JSON.parse(improvedLessonPlan),
      });
    }

    return NextResponse.json(
      { error: "Invalid step or session state." },
      { status: 400 }
    );
  } catch (error) {
    console.error(`‚ùå Error in session ${sessionId}:`, error.message);
    return NextResponse.json(
      { error: "Internal server error." },
      { status: 500 }
    );
  }
}
