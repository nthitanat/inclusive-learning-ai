import { OpenAIEmbeddings } from "@langchain/openai";
import { HumanMessage } from "@langchain/core/messages";
import { NextResponse } from "next/server";
import { getSession, createSession, updateSession } from "@/models/session";
import { ObjectId } from "mongodb";
import { connectDB } from "@/lib/db";
import { z } from "zod";
import { getRetrieverFrom } from "@/lib/retriever";
import { generateLLM } from "@/lib/llm";
import jwt from "jsonwebtoken";

const JWT_SECRET = process.env.JWT_SECRET || "your_jwt_secret";

const OPENAI_API_KEY = process.env.OPENAI_API_KEY;

const questions: { [key: number]: string } = {
  1: "1.‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏¥‡∏î‡∏ß‡πà‡∏≤‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡∏≥‡πÑ‡∏õ‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á?",
  2: "2.‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ß‡πà‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£?",
  3: "3.‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏î‡πá‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç)",
  4: "4.‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏¥‡∏î‡∏ß‡πà‡∏≤‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
  5: "5.‡∏à‡∏∏‡∏î‡∏≠‡πà‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?",
};

export async function POST(req: Request) {
  await connectDB();
  const token = req.headers.get("Authorization")?.split(" ")[1];
  if (!token) {
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }

  let userId;
  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    userId = decoded.userId;
  } catch {
    return NextResponse.json({ error: "Invalid token" }, { status: 401 });
  }

  const requestBody = await req.json();
  const {
    lessonTopic,
    subject,
    level,
    ageRange,
    studentType,
    learningTime,
    timeSlot,
    limitation,
    userMessage,
  } = requestBody;

  const conversation = [];

  let session = await getSession(userId); // Use userId to fetch session

  if (!session) {
    // Step 0: Validate all required fields for creating a new session
    if (
      !lessonTopic ||
      !subject ||
      !level ||
      !ageRange ||
      !studentType ||
      !learningTime ||
      !timeSlot ||
      !limitation
    ) {
      return NextResponse.json(
        { error: "Missing required fields." },
        { status: 400 }
      );
    }
  }

  try {
    // Step 0: Generate Lesson Plan
    if (!session) {
      const task = `‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÉ‡∏ô‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏ß‡∏° (Inclusive Classroom) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ ${level} ‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì ${ageRange} ‡∏õ‡∏µ
                    ‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏© ‡πÄ‡∏ä‡πà‡∏ô ${studentType}
                    ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏à‡∏∏‡∏î‡∏°‡∏∏‡πà‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏≠‡∏ô‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤ ${subject} ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á ${lessonTopic} ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${learningTime} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÇ‡∏î‡∏¢‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ ${timeSlot} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á/‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
                    ‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤: ${limitation}`; // Task logic remains the same
      const type = `JSON`;
      const field = `{
  "courseInfo": {
    "courseCode": "...",
    "courseTitle": "...",
    "credits": "...",
    "instructor": "...",
    "semester": "...",
    "academicYear": "...",
    "program": "...",
    "faculty": "..."
  },
  "courseDescription": "...",
  "courseObjectives": {
    "cognitive": [
      "..."
    ],
    "psychomotor": [
      "..."
    ],
    "affective": [
      "..."
    ]
  },
  "weeklyPlan": [
    {
      "week": "...",
      "topic": "...",
      "hours": "...",
      "teachingMethods": ["..."],
      "teachingMaterials": ["..."],
      "assessment": ["..."]
    }
  ],
  "studentCenteredLearning": [
    "..."
  ],
  "teachingAids": [
    "..."
  ],
  "useOfTechnology": [
    "..."
  ],
  "grading": {
    "continuousAssessment": "...",
    "midtermExam": "...",
    "finalExam": "..."
  },
  "references": {
    "mandatoryBooks": [
      "..."
    ],
    "additionalBooks": [
      "..."
    ]
  }
}
`;
      const lessonPlan = await callGenerateLLM(task, type, field, "generate");

      await createSession({
        userId: new ObjectId(userId),
        step: 1,
        lessonPlan,
        userResponses: {},
        aiResponses: {},
        conversation: [],
        improvedLessonPlan: "",
      });

      return NextResponse.json({
        type: "json",
        lessonPlan: lessonPlan,
        nextQuestion: questions[1],
      });
    }

    // Step 2-5: Reflection Questions
    if (session.step >= 1 && session.step <= 5) {
      console.log(
        `üß† Step ${session.step}: Reflection for session ${userId} with user message ${requestBody.userMessage}`
      );

      session.userResponses[`step${session.step}`] = requestBody.userMessage;

      // let context = "";
      // for (let i = 1; i < session.step; i++) {
      //   if (session.userResponses[`step${i}`]) {
      //     context += `Question ${i}: ${questions[i]}\nUser Response: ${
      //       session.userResponses[`step${i}`]
      //     }\n\n`;
      //   }
      // }
      const task = `‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏Ñ‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      ‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ä‡∏∏‡∏î‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏Ñ‡∏¥‡∏î ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö:
        ‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°:\n${JSON.stringify(session.lessonPlan, null, 2)}
        ‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ñ‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏Ñ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤:\n${session.conversation
          .map(
            (entry, index) =>
              `Question ${index + 1}: ${entry.question}\nUser Response: ${
                entry.userMessage
              }\nAI Response: ${entry.response}\n`
          )
          .join("\n")}
        ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏Ñ‡∏¥‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: "${questions[session.step]}"
        ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏Ñ‡∏¥‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: "${requestBody.userMessage}"
        ‡∏à‡∏≤‡∏Å‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ß‡∏¥‡∏à‡∏≤‡∏£‡πå‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏Ñ‡∏¥‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£`;

      const aiResponse = await callGenerateLLM(task, "text", "‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö", "followup");

      for (let i = 1; i <= session.step; i++) {
        if (session.userResponses[`step${i}`]) {
          conversation.push({
            question: questions[i],
            response: session.aiResponses[`step${i}`] || aiResponse,
            userMessage: session.userResponses[`step${i}`],
          });
        }
      }

      await updateSession(userId, {
        [`userResponses.step${session.step}`]: userMessage,
        [`aiResponses.step${session.step}`]: aiResponse,
        step: session.step + 1,
        conversation: conversation,
      });

      return NextResponse.json({
        type: "text",
        nextQuestion: questions[session.step + 1],
        conversation: conversation,
      });
    }

    // Step 6: Improved Lesson Plan
    if (session.step > 5) {
      const task = `...`; // Task logic remains the same
      const improvedLessonPlan = await callGenerateLLM(task, "JSON", "...");
      await updateSession(userId, {
        improvedLessonPlan,
        step: "completed",
      });

      return NextResponse.json({
        type: "json",
        improvedLessonPlan: JSON.parse(improvedLessonPlan),
      });
    }

    return NextResponse.json(
      { error: "Invalid step or session state." },
      { status: 400 }
    );
  } catch (error) {
    console.error(`‚ùå Error in session for user ${userId}:`, error.message);
    return NextResponse.json(
      { error: "Internal server error." },
      { status: 500 }
    );
  }
}

