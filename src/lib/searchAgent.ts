import { ChatOpenAI } from "@langchain/openai";
import { StringOutputParser } from "@langchain/core/output_parsers";
import { ChatPromptTemplate } from "@langchain/core/prompts";
import { RunnableSequence } from "@langchain/core/runnables";
import { extractJSON } from "@/utils/extractJSON";
import { Serper } from "@langchain/community/tools/serper";

const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const SERPER_API_KEY = process.env.SERPER_API_KEY;

// Initialize the LLM for search agent
const searchModel = new ChatOpenAI({
  model: "gpt-4o",
  temperature: 0.3,
  openAIApiKey: OPENAI_API_KEY,
});

// Interface for search results
interface SearchResult {
  title: string;
  url: string;
  content: string;
  relevanceScore: number;
}

interface EnhancedLessonData {
  teachingProcessExamples: string[];
  lessonDetails: string;
  udlStrategies: string[];
  inclusiveStrategies: string[];
}

// Initialize Serper search tool lazily
let serperTool: Serper | null = null;

function getSerperTool(): Serper | null {
  if (!SERPER_API_KEY) {
    console.warn("‚ö†Ô∏è SERPER_API_KEY not found");
    return null;
  }
  
  if (!serperTool) {
    serperTool = new Serper(SERPER_API_KEY);
  }
  
  return serperTool;
}

// Serper search function with error handling
async function performWebSearch(query: string): Promise<SearchResult[]> {
  try {
    console.log(`üîç Searching via Serper API for: ${query}`);
    
    const tool = getSerperTool();
    if (!tool) {
      console.warn("‚ö†Ô∏è Serper tool not available, using fallback");
      return getFallbackResults(query);
    }
    
    // Use Langchain Serper tool
    const searchResponse = await tool.call(query);
    
    if (!searchResponse) {
      console.warn(`No search results found for: ${query}`);
      return getFallbackResults(query);
    }

    // Parse Serper response
    let results: any[] = [];
    
    try {
      // First, try to parse as JSON if it looks like JSON
      if (searchResponse.toString().trim().startsWith('{') || searchResponse.toString().trim().startsWith('[')) {
        const parsedResponse = typeof searchResponse === 'string' 
          ? JSON.parse(searchResponse) 
          : searchResponse;
        
        if (parsedResponse.organic) {
          results = parsedResponse.organic;
        } else if (parsedResponse.results) {
          results = parsedResponse.results;
        } else if (Array.isArray(parsedResponse)) {
          results = parsedResponse;
        }
      } else {
        // Handle plain text response - treat entire response as content
        const textContent = searchResponse.toString().trim();
        if (textContent && textContent.length > 10) {
          results = [{
            title: `Search Result for: ${query.substring(0, 50)}...`,
            snippet: textContent,
            link: `https://search-result.com/query`
          }];
        }
      }
    } catch (parseError: any) {
      console.warn("Failed to parse Serper response, treating as plain text:", parseError?.message || 'Unknown error');
      // Always treat as plain text if JSON parsing fails
      const textContent = searchResponse.toString().trim();
      if (textContent && textContent.length > 10) {
        // Split long text into multiple results if it's very long
        const chunks = textContent.match(/.{1,500}/g) || [textContent];
        results = chunks.slice(0, 3).map((chunk: string, index: number) => ({
          title: `Result ${index + 1} for: ${query.substring(0, 30)}...`,
          snippet: chunk.trim(),
          link: `https://search-result.com/result${index + 1}`
        }));
      }
    }

    // Convert to our SearchResult format
    const searchResults: SearchResult[] = results.slice(0, 8).map((result: any, index: number) => ({
      title: result.title || result.displayTitle || `Search Result ${index + 1}`,
      url: result.link || result.url || `https://example.com/result${index + 1}`,
      content: result.snippet || result.description || result.title || '',
      relevanceScore: Math.max(0.1, 1.0 - (index * 0.1))
    }));

    console.log(`‚úÖ Found ${searchResults.length} search results via Serper`);
    return searchResults;

  } catch (error) {
    console.warn('Serper search failed:', error);
    return getFallbackResults(query);
  }
}

// Fallback results function
function getFallbackResults(query: string): SearchResult[] {
  if (query.includes("‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô") || query.includes("teaching process")) {
    return [
      {
        title: "‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÅ‡∏ö‡∏ö 5E Model",
        url: "https://education.go.th/5e-model",
        content: "‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ 5E ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Engage (‡∏à‡∏π‡∏á‡πÉ‡∏à), Explore (‡∏™‡∏≥‡∏£‡∏ß‡∏à), Explain (‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢), Elaborate (‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ), Evaluate (‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô) ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ô‡πâ‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢",
        relevanceScore: 0.95
      },
      {
        title: "Active Learning ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ",
        url: "https://teachingmethods.org/active-learning",
        content: "Active Learning ‡πÄ‡∏ô‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°‡πÉ‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏†‡∏¥‡∏õ‡∏£‡∏≤‡∏¢ ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏î‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏•‡∏∂‡∏Å‡∏ã‡∏∂‡πâ‡∏á‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡πà‡∏á‡∏¢‡∏∑‡∏ô",
        relevanceScore: 0.9
      },
      {
        title: "Problem-Based Learning in Thai Education",
        url: "https://pbl-thailand.edu/methods",
        content: "Problem-Based Learning ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏à‡∏£‡∏¥‡∏á ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏î‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏¢‡∏∏‡∏Å‡∏ï‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ",
        relevanceScore: 0.85
      },
      {
        title: "Inquiry-Based Learning Strategies",
        url: "https://inquiry-learning.edu/strategies",
        content: "‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÅ‡∏ö‡∏ö‡∏™‡∏∑‡∏ö‡πÄ‡∏™‡∏≤‡∏∞‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ (Inquiry-Based Learning) ‡∏™‡πà‡∏á‡πÄ‡∏™‡∏£‡∏¥‡∏°‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡∏ö‡∏™‡∏ß‡∏ô‡∏™‡∏≠‡∏ö‡∏™‡∏ß‡∏ô",
        relevanceScore: 0.8
      }
    ];
  } else if (query.includes("UDL") || query.includes("Universal Design")) {
    return [
      {
        title: "UDL Guidelines and Implementation in Thailand",
        url: "https://udl-thailand.org/guidelines",
        content: "Universal Design for Learning (UDL) ‡∏°‡∏µ 3 ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: Multiple Means of Representation (‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢), Multiple Means of Engagement (‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏£‡∏á‡∏à‡∏π‡∏á‡πÉ‡∏à), Multiple Means of Action and Expression (‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢)",
        relevanceScore: 0.95
      },
      {
        title: "UDL in Thai Classroom Context",
        url: "https://thai-inclusive-ed.org/udl-classroom",
        content: "‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏¢‡∏∏‡∏Å‡∏ï‡πå‡πÉ‡∏ä‡πâ UDL ‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏ó‡∏¢ ‡∏Ñ‡∏ß‡∏£‡∏Ñ‡∏≥‡∏ô‡∏∂‡∏á‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ ‡∏†‡∏≤‡∏©‡∏≤ ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡πÅ‡∏•‡∏∞‡∏™‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡πÑ‡∏ó‡∏¢",
        relevanceScore: 0.9
      },
      {
        title: "Multiple Intelligence and UDL Integration",
        url: "https://multiple-intelligence.edu/udl",
        content: "‡∏Å‡∏≤‡∏£‡∏ö‡∏π‡∏£‡∏ì‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏§‡∏©‡∏é‡∏µ‡∏û‡∏´‡∏∏‡∏õ‡∏±‡∏ç‡∏ç‡∏≤ (Multiple Intelligence) ‡∏Å‡∏±‡∏ö UDL ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏π‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û",
        relevanceScore: 0.85
      }
    ];
  } else if (query.includes("inclusive classroom") || query.includes("‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏ß‡πâ‡∏≤‡∏á") || query.includes("‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡∏£‡∏ß‡∏°")) {
    return [
      {
        title: "Inclusive Classroom Strategies for Thai Students",
        url: "https://inclusive-thailand.edu/strategies",
        content: "‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ô‡∏∂‡∏á‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡πÇ‡∏î‡∏¢‡∏à‡∏±‡∏î‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢ ‡πÉ‡∏ä‡πâ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÅ‡∏ö‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏°‡∏¥‡∏ï‡∏¥",
        relevanceScore: 0.9
      },
      {
        title: "Differentiated Instruction in Practice",
        url: "https://differentiated-learning.org/practice",
        content: "Differentiated Instruction ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à ‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢",
        relevanceScore: 0.85
      },
      {
        title: "Collaborative Learning for Diverse Classrooms",
        url: "https://collaborative-ed.org/diverse",
        content: "‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÅ‡∏ö‡∏ö‡∏£‡πà‡∏ß‡∏°‡∏°‡∏∑‡∏≠‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢ ‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏±‡∏ô ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á ‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏ó‡∏≤‡∏á‡∏™‡∏±‡∏á‡∏Ñ‡∏°",
        relevanceScore: 0.8
      }
    ];
  }
  
  // Return empty array if no relevant fallback data
  return [];
}

// Enhanced search with reasoning
export class SearchAgent {
  private model: ChatOpenAI;

  constructor() {
    this.model = searchModel;
  }

  // Search for teaching process examples
  async searchTeachingProcessExamples(subject: string, lessonTopic: string, level: string): Promise<string[]> {
    // Create comprehensive search query in both Thai and English
    const searchQueries = [
      `‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô ${subject} ${lessonTopic} ‡∏£‡∏∞‡∏î‡∏±‡∏ö${level}`,
      `teaching methodology ${subject} ${lessonTopic} grade ${level}`,
      `5E model lesson plan ${subject}`,
      `problem based learning ${subject} Thailand`,
      `active learning strategies ${subject}`
    ];
    
    try {
      const allResults: SearchResult[] = [];
      
      // Search with multiple queries to get diverse results
      for (const query of searchQueries) {
        const results = await performWebSearch(query);
        allResults.push(...results);
        
        // Add delay to be respectful to the API
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
      
      if (allResults.length === 0) {
        return await this.generateReasoningBasedExamples(subject, lessonTopic, level);
      }

      // Process search results with AI reasoning
      const reasoningPrompt = ChatPromptTemplate.fromMessages([
        ["system", "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏Å‡∏±‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°"],
        ["human", `‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: {searchResults}
        
‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö:
- ‡∏ß‡∏¥‡∏ä‡∏≤: {subject}
- ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠: {lessonTopic}  
- ‡∏£‡∏∞‡∏î‡∏±‡∏ö: {level}

‡πÉ‡∏´‡πâ 4-5 ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô:
- 5E Model (Engage, Explore, Explain, Elaborate, Evaluate)
- Problem-Based Learning 
- Active Learning
- Inquiry-Based Learning
- Project-Based Learning

‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON array ‡∏Ç‡∏≠‡∏á string:
["‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà1 ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏±‡πâ‡∏ô", "‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà2 ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏™‡∏±‡πâ‡∏ô", ...]`]
      ]);

      const chain = RunnableSequence.from([
        reasoningPrompt,
        this.model,
        new StringOutputParser(),
        (output: string) => {
          try {
            const parsed = JSON.parse(output);
            return Array.isArray(parsed) ? parsed : [output];
          } catch {
            // Fallback: split by lines if JSON parsing fails
            return output.split('\n').filter(line => line.trim().length > 0).slice(0, 5);
          }
        }
      ]);

      const examples = await chain.invoke({
        searchResults: JSON.stringify(allResults.map(r => ({
          title: r.title,
          content: r.content
        }))),
        subject,
        lessonTopic,
        level
      });

      return Array.isArray(examples) ? examples : [examples];

    } catch (error) {
      console.warn("Enhanced search failed, using reasoning-based fallback:", error);
      return await this.generateReasoningBasedExamples(subject, lessonTopic, level);
    }
  }

  // Search for UDL and inclusive strategies
  async searchUDLStrategies(subject: string, lessonTopic: string, studentTypes: any[]): Promise<{udlStrategies: string[], inclusiveStrategies: string[]}> {
    const studentTypesStr = studentTypes.map(s => s.type).join(", ");
    
    // Create multiple search queries for better coverage
    const searchQueries = [
      `UDL Universal Design Learning ${subject} ${lessonTopic} strategies`,
      `inclusive classroom strategies ${subject} Thailand`,
      `differentiated instruction ${subject} special needs`,
      `‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡∏£‡∏ß‡∏° ${subject} ${lessonTopic}`,
      `‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏ß‡πâ‡∏≤‡∏á ${subject}`,
      `multiple intelligence teaching ${subject}`,
      `accessible education ${subject} diverse learners`
    ];
    
    try {
      const allResults: SearchResult[] = [];
      
      // Perform searches with multiple queries
      for (const query of searchQueries) {
        const results = await performWebSearch(query);
        allResults.push(...results);
        
        // Rate limit consideration
        await new Promise(resolve => setTimeout(resolve, 800));
      }
      
      if (allResults.length === 0) {
        return await this.generateReasoningBasedStrategies(subject, lessonTopic, studentTypes);
      }

      const strategyPrompt = ChatPromptTemplate.fromMessages([
        ["system", "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô UDL ‡πÅ‡∏•‡∏∞ Inclusive Education ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á"],
        ["human", `‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: {searchResults}
        
‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå UDL ‡πÅ‡∏•‡∏∞ Inclusive Classroom ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö:
- ‡∏ß‡∏¥‡∏ä‡∏≤: {subject}
- ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠: {lessonTopic}
- ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: {studentTypes}

‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á ‡πÅ‡∏•‡∏∞‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏û‡∏ö

‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON:
{{
  "udlStrategies": [
    "‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå UDL 1 ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
    "‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå UDL 2 ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
    "‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå UDL 3 ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
    "‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå UDL 4 ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
  ],
  "inclusiveStrategies": [
    "‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå Inclusive 1 ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥",
    "‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå Inclusive 2 ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥",
    "‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå Inclusive 3 ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥",
    "‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå Inclusive 4 ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥"
  ]
}}`]
      ]);

      const chain = RunnableSequence.from([
        strategyPrompt,
        this.model,
        new StringOutputParser(),
        (output: string) => {
          try {
            return JSON.parse(output);
          } catch {
            return {
              udlStrategies: [
                "Multiple means of representation: ‡πÉ‡∏ä‡πâ‡∏™‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢ (‡∏†‡∏≤‡∏û ‡πÄ‡∏™‡∏µ‡∏¢‡∏á ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠)",
                "Multiple means of engagement: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏£‡∏á‡∏à‡∏π‡∏á‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢",
                "Multiple means of action/expression: ‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏≠‡∏Å",
                "Flexible learning environments: ‡∏à‡∏±‡∏î‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô"
              ],
              inclusiveStrategies: [
                "Differentiated instruction: ‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á",
                "Collaborative learning: ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÅ‡∏ö‡∏ö‡∏£‡πà‡∏ß‡∏°‡∏°‡∏∑‡∏≠",
                "Peer support systems: ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô",
                "Flexible assessment: ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡πÅ‡∏ö‡∏ö‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô"
              ]
            };
          }
        }
      ]);

      const strategies = await chain.invoke({
        searchResults: JSON.stringify(allResults.map(r => ({
          title: r.title,
          content: r.content,
          url: r.url
        }))),
        subject,
        lessonTopic,
        studentTypes: studentTypesStr
      });

      return strategies;

    } catch (error) {
      console.warn("UDL search failed, using reasoning-based fallback:", error);
      return await this.generateReasoningBasedStrategies(subject, lessonTopic, studentTypes);
    }
  }

  // Get detailed lesson information
  async getLessonDetails(subject: string, lessonTopic: string, level: string): Promise<string> {
    // Create multiple search queries for comprehensive lesson information
    const searchQueries = [
      `${subject} ${lessonTopic} ‡∏£‡∏∞‡∏î‡∏±‡∏ö${level} ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô`,
      `${subject} ${lessonTopic} ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤`,
      `${lessonTopic} concepts ${subject} grade ${level}`,
      `${lessonTopic} learning objectives ${subject}`,
      `‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£ ${subject} ${lessonTopic} ‡∏™‡∏≤‡∏£‡∏∞‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç`
    ];
    
    try {
      const allResults: SearchResult[] = [];
      
      // Search with multiple queries for comprehensive information
      for (const query of searchQueries) {
        const results = await performWebSearch(query);
        allResults.push(...results);
        
        // Rate limiting
        await new Promise(resolve => setTimeout(resolve, 600));
      }
      
      const detailPrompt = ChatPromptTemplate.fromMessages([
        ["system", "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡∏£‡∏π‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç ‡πÉ‡∏´‡πâ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡πÇ‡∏î‡∏¢‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏û‡∏ö"],
        ["human", `‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: {searchResults}
        
‡πÉ‡∏´‡πâ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô:
- ‡∏ß‡∏¥‡∏ä‡∏≤: {subject}
- ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠: {lessonTopic}
- ‡∏£‡∏∞‡∏î‡∏±‡∏ö: {level}

‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á:
- ‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
- ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏°‡∏±‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ú‡∏¥‡∏î
- ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏¢‡∏∏‡∏Å‡∏ï‡πå‡πÉ‡∏ä‡πâ
- ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©
- ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏û‡∏ö

‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏¢‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡πÅ‡∏ï‡πà‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö`]
      ]);

      const chain = RunnableSequence.from([
        detailPrompt,
        this.model,
        new StringOutputParser()
      ]);

      const details = await chain.invoke({
        searchResults: JSON.stringify(allResults.map(r => ({
          title: r.title,
          content: r.content
        }))),
        subject,
        lessonTopic,
        level
      });

      return details || `‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ${subject} ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á ${lessonTopic} ‡∏£‡∏∞‡∏î‡∏±‡∏ö${level} - ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô`;

    } catch (error) {
      console.warn("Lesson details search failed, using reasoning-based fallback:", error);
      
      // Enhanced fallback with reasoning
      const fallbackPrompt = ChatPromptTemplate.fromMessages([
        ["system", "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡∏£‡∏π‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç ‡πÉ‡∏´‡πâ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå"],
        ["human", `‡πÉ‡∏´‡πâ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô:
- ‡∏ß‡∏¥‡∏ä‡∏≤: {subject}
- ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠: {lessonTopic}
- ‡∏£‡∏∞‡∏î‡∏±‡∏ö: {level}

‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î‡∏´‡∏•‡∏±‡∏Å ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å‡∏á‡πà‡∏≤‡∏¢ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏à‡∏£‡∏¥‡∏á ‡πÅ‡∏•‡∏∞‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ô‡πâ‡∏ô`]
      ]);

      try {
        const chain = RunnableSequence.from([
          fallbackPrompt,
          this.model,
          new StringOutputParser()
        ]);

        const details = await chain.invoke({
          subject,
          lessonTopic,
          level
        });

        return details;
      } catch (fallbackError) {
        console.warn("Fallback reasoning also failed:", fallbackError);
        return `‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ${subject} ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á ${lessonTopic} ‡∏£‡∏∞‡∏î‡∏±‡∏ö${level} - ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏¢‡∏∏‡∏Å‡∏ï‡πå‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô`;
      }
    }
  }

  // Reasoning-based fallbacks
  private async generateReasoningBasedExamples(subject: string, lessonTopic: string, level: string): Promise<string[]> {
    const reasoningPrompt = ChatPromptTemplate.fromMessages([
      ["system", "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô"],
      ["human", `‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö:
- ‡∏ß‡∏¥‡∏ä‡∏≤: {subject}
- ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠: {lessonTopic}
- ‡∏£‡∏∞‡∏î‡∏±‡∏ö: {level}

‡πÉ‡∏´‡πâ 3 ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô ‡πÄ‡∏ä‡πà‡∏ô 5E Model, Problem-Based Learning, ‡∏´‡∏£‡∏∑‡∏≠ Active Learning

‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON array: ["‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà1", "‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà2", "‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà3"]`]
    ]);

    const chain = RunnableSequence.from([
      reasoningPrompt,
      this.model,
      new StringOutputParser(),
      (output: string) => {
        try {
          return JSON.parse(output);
        } catch {
          return [
            "5E Model: Engage ‚Üí Explore ‚Üí Explain ‚Üí Elaborate ‚Üí Evaluate",
            "Problem-Based Learning: ‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‚Üí ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ‚Üí ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‚Üí ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‚Üí ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•",
            "Active Learning: ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏° ‚Üí ‡∏Å‡∏≤‡∏£‡∏≠‡∏†‡∏¥‡∏õ‡∏£‡∏≤‡∏¢ ‚Üí ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏•‡∏≠‡∏á ‚Üí ‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠ ‚Üí ‡∏Å‡∏≤‡∏£‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏ú‡∏•"
          ];
        }
      }
    ]);

    return await chain.invoke({ subject, lessonTopic, level });
  }

  private async generateReasoningBasedStrategies(subject: string, lessonTopic: string, studentTypes: any[]): Promise<{udlStrategies: string[], inclusiveStrategies: string[]}> {
    const studentTypesStr = studentTypes.map(s => `${s.type} (${s.percentage}%)`).join(", ");
    
    const strategyPrompt = ChatPromptTemplate.fromMessages([
      ["system", "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô UDL ‡πÅ‡∏•‡∏∞ Inclusive Education ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå"],
      ["human", `‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå UDL ‡πÅ‡∏•‡∏∞ Inclusive ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö:
- ‡∏ß‡∏¥‡∏ä‡∏≤: {subject}
- ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠: {lessonTopic}
- ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: {studentTypes}

‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á

‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON:
{{
  "udlStrategies": ["‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå UDL ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á 3 ‡∏≠‡∏¢‡πà‡∏≤‡∏á"],
  "inclusiveStrategies": ["‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå Inclusive ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á 3 ‡∏≠‡∏¢‡πà‡∏≤‡∏á"]
}}`]
    ]);

    const chain = RunnableSequence.from([
      strategyPrompt,
      this.model,
      new StringOutputParser(),
      (output: string) => {
        try {
          return JSON.parse(output);
        } catch {
          return {
            udlStrategies: [
              "‡πÉ‡∏ä‡πâ‡∏™‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢ (‡∏†‡∏≤‡∏û ‡πÄ‡∏™‡∏µ‡∏¢‡∏á ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤",
              "‡∏à‡∏±‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö",
              "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏£‡∏á‡∏à‡∏π‡∏á‡πÉ‡∏à‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô"
            ],
            inclusiveStrategies: [
              "‡∏à‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô",
              "‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏ö‡∏ö‡∏ú‡∏™‡∏°‡∏ú‡∏™‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°",
              "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡πÅ‡∏ö‡∏ö‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô"
            ]
          };
        }
      }
    ]);

    return await chain.invoke({ subject, lessonTopic, studentTypes: studentTypesStr });
  }

  // Main search and reasoning method
  async performEnhancedSearch(subject: string, lessonTopic: string, level: string, studentTypes: any[]): Promise<EnhancedLessonData> {
    console.log(`ü§ñ Starting enhanced Serper API search for: ${subject} - ${lessonTopic}`);
    
    try {
      // Perform all searches in parallel for efficiency (but with staggered timing)
      console.log("üîç Performing comprehensive web search via Serper API across multiple categories...");
      
      const [teachingProcessExamples, lessonDetails, strategiesData] = await Promise.all([
        this.searchTeachingProcessExamples(subject, lessonTopic, level),
        this.getLessonDetails(subject, lessonTopic, level),
        this.searchUDLStrategies(subject, lessonTopic, studentTypes)
      ]);

      console.log("‚úÖ All Serper searches completed successfully");
      console.log(`üìä Found ${teachingProcessExamples.length} teaching processes, UDL strategies: ${strategiesData.udlStrategies.length}, Inclusive strategies: ${strategiesData.inclusiveStrategies.length}`);

      return {
        teachingProcessExamples,
        lessonDetails,
        udlStrategies: strategiesData.udlStrategies,
        inclusiveStrategies: strategiesData.inclusiveStrategies
      };

    } catch (error) {
      console.error("Enhanced Serper API search failed:", error);
      
      // Return comprehensive fallback data
      console.log("üîÑ Using comprehensive AI reasoning fallback");
      
      return {
        teachingProcessExamples: [
          "5E Model: Engage (‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à) ‚Üí Explore (‡∏™‡∏≥‡∏£‡∏ß‡∏à) ‚Üí Explain (‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢) ‚Üí Elaborate (‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ) ‚Üí Evaluate (‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•)",
          "Problem-Based Learning: ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏à‡∏£‡∏¥‡∏á ‡πÇ‡∏î‡∏¢‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏±‡∏ç‡∏´‡∏≤ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ‡∏Ñ‡πâ‡∏ô‡∏Ñ‡∏ß‡πâ‡∏≤ ‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç",
          "Active Learning: ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏ä‡∏¥‡∏á‡∏£‡∏∏‡∏Å‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏†‡∏¥‡∏õ‡∏£‡∏≤‡∏¢ ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏° ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏•‡∏≠‡∏á",
          "Inquiry-Based Learning: ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° ‡∏™‡∏∑‡∏ö‡πÄ‡∏™‡∏≤‡∏∞‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•",
          "Collaborative Learning: ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÅ‡∏ö‡∏ö‡∏£‡πà‡∏ß‡∏°‡∏°‡∏∑‡∏≠ ‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡∏°‡πÅ‡∏•‡∏∞‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î"
        ],
        lessonDetails: `‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤${subject} ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á${lessonTopic} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö${level} ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏£‡∏¥‡∏á ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏î‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏¢‡∏∏‡∏Å‡∏ï‡πå‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô ‡πÇ‡∏î‡∏¢‡∏Ñ‡∏≥‡∏ô‡∏∂‡∏á‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡πÉ‡∏ô‡∏®‡∏ï‡∏ß‡∏£‡∏£‡∏©‡∏ó‡∏µ‡πà 21`,
        udlStrategies: [
          "Multiple Means of Representation: ‡πÉ‡∏ä‡πâ‡∏™‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢ (‡∏†‡∏≤‡∏û ‡πÄ‡∏™‡∏µ‡∏¢‡∏á ‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ ‡πÅ‡∏ö‡∏ö‡∏à‡∏≥‡∏•‡∏≠‡∏á) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤",
          "Multiple Means of Engagement: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏£‡∏á‡∏à‡∏π‡∏á‡πÉ‡∏à‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô",
          "Multiple Means of Action/Expression: ‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ (‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô ‡∏û‡∏π‡∏î ‡∏ß‡∏≤‡∏î ‡∏™‡∏£‡πâ‡∏≤‡∏á ‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠)",
          "Flexible Learning Environment: ‡∏à‡∏±‡∏î‡∏™‡∏¥‡πà‡∏á‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢"
        ],
        inclusiveStrategies: [
          "Differentiated Instruction: ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô",
          "Collaborative Learning Structures: ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏ö‡∏ö‡∏ú‡∏™‡∏°‡∏ú‡∏™‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏ã‡∏∂‡πà‡∏á‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏±‡∏ô",
          "Peer Support Systems: ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô",
          "Multi-modal Assessment: ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô"
        ]
      };
    }
  }
}

// Export singleton instance with Serper API search integration
export const searchAgent = new SearchAgent();
